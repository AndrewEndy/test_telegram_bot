from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from sqlalchemy import delete
from sqlalchemy.future import select
from sqlalchemy.orm import joinedload
from bot.create_bot import bot
from bot.database.models import User, Product, Cart, Order
from bot.database.db import AsyncSessionLocal
from bot.keyboards.inline_keyboards import get_product_variants_keyboard
from bot.services.liqpay import generate_payment_link

user_router = Router()


async def get_all_products(message: types.Message, session: AsyncSessionLocal):
    result = await session.execute(select(Product))
    products = result.scalars().all()

    if not products:
        await message.answer("–ù–∞—Ä–∞–∑—ñ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ.")
        return

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–∂–µ–Ω —Ç–æ–≤–∞—Ä –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –∑ –∫–Ω–æ–ø–∫–∞–º–∏
    for product in products:
        text = f"üõí <b>{product.name}</b>\n\n–û–ø–∏—Å: {product.description}\nüí∞ –¶—ñ–Ω–∞: {product.price} –≥—Ä–Ω"
        await message.answer(text, reply_markup=get_product_variants_keyboard(product))


# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
@user_router.message(Command("start"))
async def start_command(message: types.Message):
    async with AsyncSessionLocal() as session:
        user = await session.get(User, message.from_user.id)

        if not user: # –Ø–∫—â–æ —Ü–µ –Ω–æ–≤–∏–π —é–∑–µ—Ä
            user = User(tg_id=message.from_user.id, username=message.from_user.username or "Unknown")
            session.add(user)
            await session.commit()

        # –°—Ç–≤–æ—Ä—é—î–º–æ reply-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        reply_kb = ReplyKeyboardBuilder()
        reply_kb.button(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")
        reply_kb.button(text="üì¶ –ê—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç")

        await message.answer(
            f"–ü—Ä–∏–≤—ñ—Ç, {user.username}! üëã\n"
            "–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –∫—É–ø–∏—Ç–∏ —Ç–æ–≤–∞—Ä–∏. –û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç–æ–≤–∞—Ä–∏:",
            reply_markup=reply_kb.as_markup(resize_keyboard=True)
        )

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏
        await get_all_products(message, session)


# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /products
@user_router.message(Command("products"))
async def products_command(message: types.Message):
    async with AsyncSessionLocal() as session:
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏
        await get_all_products(message, session)


# –û–±—Ä–æ–±–∫–∞ reply –∫–Ω–æ–ø–∫–∏ "üì¶ –ê—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç"
@user_router.message(F.text == "üì¶ –ê—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç")
async def products_command(message: types.Message):
    async with AsyncSessionLocal() as session:
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏
        await get_all_products(message, session)


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –≤ –∫–æ—à–∏–∫
@user_router.callback_query(F.data.startswith("variant_"))
async def add_to_cart(callback: types.CallbackQuery):
    _, product_id, variant = callback.data.split("_")
    product_id = int(product_id)

    async with AsyncSessionLocal() as session:
        product = await session.get(Product, product_id)

        if not product:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç–æ–≤–∞—Ä –≤–∂–µ —î –≤ –∫–æ—à–∏–∫—É
        existing_cart_item = await session.execute(
            select(Cart).where(Cart.user_id == callback.from_user.id, Cart.product_id == product_id,
                               Cart.variant == variant)
        )
        cart_item = existing_cart_item.scalars().first()

        if cart_item:
            cart_item.quantity += 1  # –Ø–∫—â–æ —î, –∑–±—ñ–ª—å—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
        else:
            cart_item = Cart(user_id=callback.from_user.id, product_id=product_id, variant=variant, quantity=1)
            session.add(cart_item)

        await session.commit()

    await callback.answer(f"‚úÖ {product.name} ({variant}) –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞!")


# –û–±—Ä–æ–±–Ω–∏–∫ reply –∫–Ω–æ–ø–∫–∏ "–ö–æ—à–∏–∫"
@user_router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: types.Message):
    async with AsyncSessionLocal() as session:
        cart_items = await session.execute(
            select(Cart).options(joinedload(Cart.product)).where(Cart.user_id == message.from_user.id)
        )
        cart_items = cart_items.scalars().all()

    if not cart_items:
        await message.answer("üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π")
        return

    total_price = 0
    cart_text = "üõí <b>–í–∞—à –∫–æ—à–∏–∫:</b>\n\n"
    for item in cart_items:
        total_price += item.product.price * item.quantity
        cart_text += f"{item.product.name} ({item.variant}) - {item.quantity} —à—Ç.\nüí∞ {item.product.price * item.quantity} –≥—Ä–Ω\n\n"

    cart_text += f"<b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_price} –≥—Ä–Ω</b>"

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç–∏"
    buy_button = InlineKeyboardBuilder()
    buy_button.button(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏", callback_data="checkout")

    await message.answer(cart_text, reply_markup=buy_button.as_markup())


# –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ —Ç–∞ –∑–º—ñ–Ω–∏ –≤ –±–¥
@user_router.callback_query(F.data == "checkout")
async def checkout(callback: types.CallbackQuery):
    async with AsyncSessionLocal() as session:
        cart_items = await session.execute(
            select(Cart).options(joinedload(Cart.product)).where(Cart.user_id == callback.from_user.id)
        )
        cart_items = cart_items.scalars().all()

        if not cart_items:
            await callback.answer("‚ùå –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π", show_alert=True)
            return

        total_price = float(sum(item.product.price * item.quantity for item in cart_items))

        # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–¥–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤
        order = Order(user_id=callback.from_user.id, status="pending")
        session.add(order)
        await session.commit()
        await session.refresh(order)  # –û–Ω–æ–≤–ª—é—î–º–æ –æ–±'—î–∫—Ç, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ ID

        # –î–æ–¥–∞—î–º–æ —Ç–æ–≤–∞—Ä–∏ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (—Ç–∏–º—á–∞—Å–æ–≤–æ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä)
        for item in cart_items:
            order.product_id = item.product_id
            await session.commit()

        payment_url = generate_payment_link(total_price, f"order_{order.id}", "–û–ø–ª–∞—Ç–∞ –∫–æ—à–∏–∫–∞")

        # –û—á–∏—â–∞—î–º–æ –∫–æ—à–∏–∫
        await session.execute(delete(Cart).where(Cart.user_id == callback.from_user.id))
        await session.commit()

        # –°—Ç–≤–æ—Ä—é—î–º–æ inline-–∫–Ω–æ–ø–∫—É –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º
        builder = InlineKeyboardBuilder()
        builder.button(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏", url=payment_url)

        # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ message_id
        sent_message = await callback.message.edit_text(
            "üí≥ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –æ–ø–ª–∞—Ç–∏—Ç–∏ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:",
            reply_markup=builder.as_markup()
        )

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ message_id —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        order.message_id = sent_message.message_id
        await session.commit()


async def notify_user(order_id: int):
    async with AsyncSessionLocal() as session:
        order = await session.get(Order, order_id)
        if order.status == "paid":
            await bot.send_message(order.user_id, "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–∞! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è.")
        elif order.status == "failed":
            await bot.send_message(order.user_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–ø–ª–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")